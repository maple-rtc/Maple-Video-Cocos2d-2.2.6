import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "com.lmaple.cocos2dxsample"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode 100
        versionName "1.0.0"

        externalNativeBuild {
            if (PROP_BUILD_TYPE == 'ndk-build') {
                ndkBuild {
                    targets 'cocos2dcpp'
                    // arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    // arguments 'APP_PLATFORM=android-'+PROP_APP_PLATFORM
                    // arguments 'NDK_LOG=1'
                    arguments 'CLASSES_PATH=' + project.file("../../Classes").absolutePath
                    arguments 'COCOS2DX_PATH=' + project.file("../../../cocos2dx").absolutePath
                    arguments 'LIBS_PATH=' + project.file("../../libs").absolutePath
                    arguments '-j' + Runtime.runtime.availableProcessors()

                    def module_paths = [
                            project.file("../../..").absolutePath,
                            project.file("../../../cocos2dx").absolutePath,
                            project.file("../../../cocos2dx/platform/third_party/android/prebuilt").absolutePath,
                            project.file("../../../CocosDenshion/android").absolutePath,
                            project.file("../../../Sample").absolutePath

                            // project.file("../../../../").absolutePath,
                            // project.file("../../cocos2d/cocos").absolutePath,
                            // project.file("../../cocos2d/external").absolutePath
                    ]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                }
            }
        }
        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
        missingDimensionStrategy 'targetframework', 'cocos2dx'
    }

    sourceSets.main {
        java.srcDirs = ["src",
        ]
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    externalNativeBuild {
        if (PROP_BUILD_TYPE == 'ndk-build') {
            ndkBuild {
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {
//       release {
//            if (project.hasProperty("RELEASE_STORE_FILE")) {
//                storeFile file(RELEASE_STORE_FILE)
//                storePassword RELEASE_STORE_PASSWORD
//                keyAlias RELEASE_KEY_ALIAS
//                keyPassword RELEASE_KEY_PASSWORD
//            }
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            if (project.hasProperty("RELEASE_STORE_FILE")) {
//                signingConfig signingConfigs.release
//            }
        }
        debug {
            debuggable true
            jniDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }

    flavorDimensions "app"
    productFlavors {
        app {
            dimension "app"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':libcocos2dx')
    implementation "org.androidannotations:androidannotations-api:${versions.androidAnnotations}"
    implementation "com.android.support.constraint:constraint-layout:${versions.constraintLayout}"
    implementation "com.android.support:support-v4:${versions.supportLibrary}"
    implementation "com.android.support:appcompat-v7:${versions.appcompatLibrary}"
}

task cleanAssets(type: Delete) {
    delete 'assets'
}
task copyAssets(type: Copy) {
    from '../../Resources'
    into 'assets'
}

clean.dependsOn cleanAssets
preBuild.dependsOn copyAssets
